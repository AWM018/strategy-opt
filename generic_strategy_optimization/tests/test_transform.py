#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Tests for `transform` package."""

import pytest
import pandas as pd
from pandas.testing import assert_series_equal, assert_frame_equal

from generic_strategy_optimization.transform import HA, gen_HA, downsample


@pytest.fixture
def candles_5m_3rows():
    arr = [
            [1504927800,303.11,305.1,305.02,304.39,452.56688104],
            [1504928100,303.99,304.4,304.39,303.99,508.66859951],
            [1504928400,303.04,304.4,303.99,303.88,526.7675571],
          ]
    rv = pd.DataFrame(arr, columns=('ts', 'low', 'high', 'open', 'close', 'volume')).set_index('ts')
    return rv


@pytest.fixture
def candles_5m_40rows():
    arr = [
            [1513930800,628.53,635.46,629.37,635.24,205.97453957],
            [1513931100,631,635.68,635.24,634.21,74.75369283],
            [1513931400,633.58,653.76,633.58,653.36,128.6972842],
            [1513931700,650.22,664.66,653.42,654.77,189.07645963],
            [1513932000,650.26,653.93,653.19,650.26,85.44704107],
            [1513932300,641.64,651.06,650.26,647.68,169.78892461],
            [1513932600,646.55,653.74,647.67,650,103.72501261],
            [1513932900,649.9,653.68,649.99,651.99,113.93623401],
            [1513933200,652,667.97,652.33,664.46,355.26597024],
            [1513933500,664.56,671.93,667.77,669,240.7953687],
            [1513933800,657.33,669.62,669.12,666.19,96.33266856],
            [1513934100,666.19,673.76,667.29,670.25,123.36833368],
            [1513934400,669.59,675,670.19,675,145.24845981],
            [1513934700,675,688.99,675,688.12,316.32329402],
            [1513935000,679.93,688.11,688.11,683,181.08651939],
            [1513935300,683.04,697.96,683.04,694,264.23576236],
            [1513935600,694,701,695.72,698.84,345.12446683],
            [1513935900,698.01,704.98,698.84,700.99,210.90028967],
            [1513936200,685.67,703.51,701.99,686.21,138.88844197],
            [1513936500,672.92,690.01,685.79,689.15,213.06416502],
            [1513936800,689.14,697.43,689.14,694.98,160.43862044],
            [1513937100,688,694.84,694.84,694,195.78840035],
            [1513937400,691.03,694,694,691.26,104.32096822],
            [1513937700,690.01,697.33,690.01,697.33,236.45494184],
            [1513938000,697.32,709.99,697.33,709.99,252.18568871],
            [1513938300,708.67,713.01,709.99,709.8,167.70473181],
            [1513938600,705.65,712,709.8,711.7,195.73482987],
            [1513938900,711.02,712.59,711.7,711.02,170.57843675],
            [1513939200,710.02,714.99,711.01,710.02,171.52601447],
            [1513939500,706.01,715.01,706.01,712.03,155.97484788],
            [1513939800,693.12,712.03,712.03,698.77,165.75384247],
            [1513940100,688.74,703.29,699.54,690.21,170.95883755],
            [1513940400,675,691.06,690.36,678.32,312.7283785],
            [1513940700,655,682,678.31,681.99,606.61319273],
            [1513941000,675.79,687.91,681.58,687.21,119.44389932],
            [1513941300,672.77,687.13,686.29,673.98,195.66746861],
            [1513941600,667.42,679.97,674,679.65,224.30705334],
            [1513941900,672.89,679.64,679.64,676.94,163.50389894],
            [1513942200,674.09,675.81,675.81,675,195.68584249],
            [1513942500,664.15,675,675,664.16,129.93857446],
          ]
    rv = pd.DataFrame(arr, columns=('ts', 'low', 'high', 'open', 'close', 'volume')).set_index('ts')
    return rv


def test_HA_adds_heikin_ashi_column_to_dataframe(candles_5m_3rows):
    """Sample pytest test function with the pytest fixture as an argument."""
    candles = candles_5m_3rows
    df = HA(candles)
    assert 'heikin_ashi' in df
    assert len(df) == len(candles)
    assert_series_equal(
        df.heikin_ashi,
        pd.Series([304.405, 304.1925, 303.8275], index=df.index),
        check_names=False)


def test_coarse_downsample_works_with_8row_candles(candles_5m_40rows):
    """
Input:
               low    high    open   close      volume
ts
1513930800  628.53  635.46  629.37  635.24  205.974540
1513931100  631.00  635.68  635.24  634.21   74.753693
1513931400  633.58  653.76  633.58  653.36  128.697284
1513931700  650.22  664.66  653.42  654.77  189.076460
1513932000  650.26  653.93  653.19  650.26   85.447041
1513932300  641.64  651.06  650.26  647.68  169.788925
1513932600  646.55  653.74  647.67  650.00  103.725013
1513932900  649.90  653.68  649.99  651.99  113.936234

Output:
               low    high    open   close      volume
ts
1513930800  628.53  664.66  629.37  654.77  598.501976
1513932000  641.64  653.93  653.19  651.99  472.897212
    """

    candles = candles_5m_40rows.iloc[:8]

    df = downsample(candles, 4, 'coarse')

    assert len(df) == 2
    assert (df.index == pd.Int64Index([1513930800, 1513932000])).all()
    assert_frame_equal(
        df,
        pd.DataFrame(
            [
                [1513930800, 628.53, 664.66, 629.37, 654.77, 598.501976],
                [1513932000, 641.64, 653.93, 653.19, 651.99, 472.897212],
            ],
            columns=('ts', 'low', 'high', 'open', 'close', 'volume')).set_index('ts')
        )


def test_coarse_downsample_works_with_9row_candles(candles_5m_40rows):
    """
Input:
               low    high    open   close      volume
ts
1513930800  628.53  635.46  629.37  635.24  205.974540
1513931100  631.00  635.68  635.24  634.21   74.753693
1513931400  633.58  653.76  633.58  653.36  128.697284
1513931700  650.22  664.66  653.42  654.77  189.076460
1513932000  650.26  653.93  653.19  650.26   85.447041
1513932300  641.64  651.06  650.26  647.68  169.788925
1513932600  646.55  653.74  647.67  650.00  103.725013
1513932900  649.90  653.68  649.99  651.99  113.936234
1513933200  652.00  667.97  652.33  664.46  355.265970

Output:
               low    high    open   close      volume
ts
1513931100  631.00  664.66  635.24  650.26  477.974478
1513932300  641.64  667.97  650.26  664.46  742.716141
    """

    candles = candles_5m_40rows.iloc[:9]

    df = downsample(candles, 4, 'coarse')

    assert len(df) == 2
    assert (df.index == pd.Int64Index([1513931100, 1513932300])).all()
    assert_frame_equal(
        df,
        pd.DataFrame(
            [
                [1513931100, 631.00, 664.66, 635.24, 650.26, 477.974478],
                [1513932300, 641.64, 667.97, 650.26, 664.46, 742.716141],
            ],
            columns=('ts', 'low', 'high', 'open', 'close', 'volume')).set_index('ts')
        )


def test_coarse_downsample_works_with_10row_candles(candles_5m_40rows):
    """
Input:
               low    high    open   close      volume
ts
1513930800  628.53  635.46  629.37  635.24  205.974540
1513931100  631.00  635.68  635.24  634.21   74.753693
1513931400  633.58  653.76  633.58  653.36  128.697284 <--+
1513931700  650.22  664.66  653.42  654.77  189.076460    |
1513932000  650.26  653.93  653.19  650.26   85.447041    |
1513932300  641.64  651.06  650.26  647.68  169.788925    v
1513932600  646.55  653.74  647.67  650.00  103.725013 <--+
1513932900  649.90  653.68  649.99  651.99  113.936234    |
1513933200  652.00  667.97  652.33  664.46  355.265970    |
1513933500  664.56  671.93  667.77  669.00  240.795369    v

Output:
               low    high    open   close      volume
ts
1513931400  633.58  664.66  633.58  647.68  573.009710
1513932600  646.55  671.93  647.67  669.00  813.722586
    """

    candles = candles_5m_40rows.iloc[:10]

    df = downsample(candles, 4, 'coarse')

    assert len(df) == 2
    assert (df.index == pd.Int64Index([1513931400, 1513932600])).all()
    assert_frame_equal(
        df,
        pd.DataFrame(
            [
                [1513931400, 633.58, 664.66, 633.58, 647.68, 573.009710],
                [1513932600, 646.55, 671.93, 647.67, 669.00, 813.722586],
            ],
            columns=('ts', 'low', 'high', 'open', 'close', 'volume')).set_index('ts')
        )


def test_coarse_downsample_works_with_11row_candles(candles_5m_40rows):
    """
Input:
               low    high    open   close      volume
ts
1513930800  628.53  635.46  629.37  635.24  205.974540
1513931100  631.00  635.68  635.24  634.21   74.753693
1513931400  633.58  653.76  633.58  653.36  128.697284
1513931700  650.22  664.66  653.42  654.77  189.076460 <--+
1513932000  650.26  653.93  653.19  650.26   85.447041    |
1513932300  641.64  651.06  650.26  647.68  169.788925    |
1513932600  646.55  653.74  647.67  650.00  103.725013    v
1513932900  649.90  653.68  649.99  651.99  113.936234 <--+
1513933200  652.00  667.97  652.33  664.46  355.265970    |
1513933500  664.56  671.93  667.77  669.00  240.795369    |
1513933800  657.33  669.62  669.12  666.19   96.332669    v

Output:
               low    high    open   close      volume
ts
1513931700  641.64  664.66  653.42  650.00  548.037438
1513932900  649.90  671.93  649.99  666.19  806.330242
    """

    candles = candles_5m_40rows.iloc[:11]

    df = downsample(candles, 4, 'coarse')
    print(candles)
    print(df)

    assert len(df) == 2
    assert (df.index == pd.Int64Index([1513931700, 1513932900])).all()
    assert_frame_equal(
        df,
        pd.DataFrame(
            [
                [1513931700, 641.64, 664.66, 653.42, 650.00, 548.037438],
                [1513932900, 649.90, 671.93, 649.99, 666.19, 806.330242],
            ],
            columns=('ts', 'low', 'high', 'open', 'close', 'volume')).set_index('ts')
        )


def test_fine_downsample_works_with_8row_candles(candles_5m_40rows):
    """
Input:
               low    high    open   close      volume
ts
1513930800  628.53  635.46  629.37  635.24  205.974540
1513931100  631.00  635.68  635.24  634.21   74.753693
1513931400  633.58  653.76  633.58  653.36  128.697284
1513931700  650.22  664.66  653.42  654.77  189.076460
1513932000  650.26  653.93  653.19  650.26   85.447041
1513932300  641.64  651.06  650.26  647.68  169.788925
1513932600  646.55  653.74  647.67  650.00  103.725013
1513932900  649.90  653.68  649.99  651.99  113.936234

Output:
               low    high    open   close      volume
ts
1513930800  628.53  664.66  629.37  654.77  598.501976
1513931100  631.00  664.66  635.24  650.26  477.974478
1513931400  633.58  664.66  633.58  647.68  573.009710
1513931700  641.64  664.66  653.42  650.00  548.037438
1513932000  641.64  653.93  653.19  651.99  472.897212
    """

    candles = candles_5m_40rows.iloc[:8]

    df = downsample(candles, 4, 'fine')
    print(df)

    assert len(df) == 5
    assert (df.index == pd.Int64Index([1513930800, 1513931100, 1513931400, 1513931700, 1513932000])).all()
    assert_frame_equal(
        df,
        pd.DataFrame(
            [
                [1513930800, 628.53, 664.66, 629.37, 654.77, 598.501976],
                [1513931100, 631.00, 664.66, 635.24, 650.26, 477.974478],
                [1513931400, 633.58, 664.66, 633.58, 647.68, 573.009710],
                [1513931700, 641.64, 664.66, 653.42, 650.00, 548.037438],
                [1513932000, 641.64, 653.93, 653.19, 651.99, 472.897212],
            ],
            columns=('ts', 'low', 'high', 'open', 'close', 'volume')).set_index('ts')
        )
